import re
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from app.config import BOT_TOKEN, DB_URL
from app.database import Database
from app.filters import IsAdmin

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database(DB_URL)

USER_COMMANDS = """
ü§ñ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –±–æ—Ç - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:

üìã –î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
!–ë–∞–Ω–∫ - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π —Å—á–µ—Ç

üí° –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç
"""

ADMIN_COMMANDS = """
üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:

!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –û—á–∫–æ–≤ –ö–ª—É–±–∞ –Ω–∞ [—á–∏—Å–ª–æ] @username - –ò–∑–º–µ–Ω–∏—Ç—å –æ—á–∫–∏ –∫–ª—É–±–∞
!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ö—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ [—á–∏—Å–ª–æ] @username - –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
/–±–∞–Ω–∫_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üí° –ü—Ä–∏–º–µ—Ä—ã:
!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –û—á–∫–æ–≤ –ö–ª—É–±–∞ –Ω–∞ 100 @ivanov
!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ö—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ -50 @petrov
"""

@dp.message(IsAdmin(), F.text.startswith("/start"))
async def start_handler(message: Message):
    response = USER_COMMANDS + "\n\n" + ADMIN_COMMANDS
    await message.answer(response)

@dp.message(F.text.startswith("/start"))
async def start_handler(message: Message):
    response = USER_COMMANDS
    await message.answer(response)
    

@dp.message(F.text.startswith("!"))
async def show_bank(message: Message):
    if not message.text.lower() in ['! –±–∞–Ω–∫', '!–±–∞–Ω–∫']:
        return
    
    user_id = message.from_user.id
    username = message.from_user.username or f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: {user_id})"
    
    await db.create_user(user_id, message.from_user.username or "")
    user = await db.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    club_points = user.get('club_points', 0)
    credit_rating = user.get('credit_rating', 0)
    
    response = (
        f"üè¶ –õ–∏—á–Ω—ã–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}\n\n"
        f"ü™ô –°—á—ë—Ç –û—á–∫–æ–≤ –ö–ª—É–±–∞: {club_points}\n"
        f"üíπ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {credit_rating}"
    )
    
    await message.reply(response)

@dp.message(IsAdmin(), F.text.startswith("!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –û—á–∫–æ–≤ –ö–ª—É–±–∞ –Ω–∞"))
async def update_club_points(message: Message):
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: "!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –û—á–∫–æ–≤ –ö–ª—É–±–∞ –Ω–∞ 100 @username"
    pattern = r"!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –û—á–∫–æ–≤ –ö–ª—É–±–∞ –Ω–∞ (-?\d+) @(\w+)"
    match = re.search(pattern, message.text)
    
    if not match:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: !–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –û—á–∫–æ–≤ –ö–ª—É–±–∞ –Ω–∞ 100 @username")
        return
    
    points = int(match.group(1))
    username = match.group(2)
    
    user = await db.get_user_by_username(username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    await db.update_club_points(user['tg_id'], points)
    await message.reply(f"‚úÖ –ë–∞–ª–∞–Ω—Å –û—á–∫–æ–≤ –ö–ª—É–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {points}")

@dp.message(IsAdmin(), F.text.startswith("!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ö—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞"))
async def update_credit_rating(message: Message):
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: "!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ö—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ 50 @username"
    pattern = r"!–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ö—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ (-?\d+) @(\w+)"
    match = re.search(pattern, message.text)
    
    if not match:
        await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: !–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ö—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ 50 @username")
        return
    
    rating = int(match.group(1))
    username = match.group(2)
    
    user = await db.get_user_by_username(username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    await db.update_credit_rating(user['tg_id'], rating)
    await message.reply(f"‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {rating}")

@dp.message(IsAdmin(), Command("–±–∞–Ω–∫_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def show_bank_stats(message: Message):
    users = await db.get_all_users()
    
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–Ω–∫–∞:\n\n"
    for user in users:
        username_display = f"@{user['username']}" if user.get('username') else f"ID: {user['tg_id']}"
        club_points = user.get('club_points', 0)
        credit_rating = user.get('credit_rating', 0)
        response += f"üë§ {username_display}: ü™ô {club_points} | üíπ {credit_rating}\n"
    
    await message.reply(response)

async def main():
    await db.connect()
    await db.create_table()  # –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())